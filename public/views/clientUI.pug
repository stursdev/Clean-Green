extends layout

block content
    #modalPickUp.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalLabel', aria-hidden='true')
      .modal-dialog.modal-dialog-centered(role='document')
        .modal-content
          form(method='POST', action='/pickup')
            .modal-header.text-center
              h5#exampleModalLabel.modal-title.w-100.font-weight-bold Pick-Up Request
              button.close(type='button', data-dismiss='modal', aria-label='Close')
                span(aria-hidden='true') Ã—
            .modal-body
              .form-group
                input.form-control(type='text' id='street' name='street' placeholder='Street Address' required)
              .form-group
                input.form-control(type='text' id='city' name='city' placeholder='City' required)
              .form-group
                input.form-control(type='text' id='state' name='state' placeholder='State' required)
              .form-group
                input.form-control(type='text' id='zip' name='zip' placeholder='Zip-Code' required)
              h5 #[strong I'm recycling:]
              .form-check.form-check-inline
                input.form-check-input(id='checkboxGlass', type='checkbox', name='item', value='glass' required autofocus)
                label.form-check-label(for='checkboxGlass') Glass
              .form-check.form-check-inline
                input.form-check-input(id='checkboxCans', type='checkbox' name='item' value='cans' required)
                label.form-check-label(for='checkboxCans') Cans
              .form-check.form-check-inline
                input.form-check-input(type='checkbox' id='checkboxPaper' name='item' value='paper' required)
                label.form-check-label(for='checkboxPaper') Paper
              .form-check.form-check-inline
                input.form-check-input(type='checkbox' id='checkboxCartons' name='item' value='cartons' required)
                label.form-check-label(for='checkboxCartons') Cartons
              .form-check.form-check-inline
                input.form-check-input(type='checkbox' id='checkboxPlastic' name='item' value='plastic' required)
                label.form-check-label(for='checkboxPlastic') Plastic
              br
              h5 #[strong How many bags are you recycling?]
              .form-check.form-check-inline
                input.form-check-input(type='radio', id="container1", name='container', value='1' required)
                label.form-check-label(for='container1') 1
              .form-check.form-check-inline
                input.form-check-input(type='radio', id="container2", name='container', value='2' required)
                label.form-check-label(for='container2') 2
              .form-check.form-check-inline
                input.form-check-input(type='radio', id="container3", name='container', value='3' required)
                label.form-check-label(for='container3') 3
            .modal-footer.d-flex.justify-content-center
              button.btn.btn-success(type='submit') Submit    


    - if (messages.success) {
      .alert.alert-success.alert-dismissible.fade.show(role='alert')
        p #{messages.success}
        button.close(type='button', data-dismiss='alert', aria-label='Close')
          span(aria-hidden='true') &times;
    - }
    .navbar.navbar-expand-lg.navbar-dark.bg-dark.navbar-full
      a.navbar-brand(href='/register/clientUI')
        img(src='/css/img/recycleicon.svg', width='35', height='35', alt='GnC') 
      span.user_type Client #{user.firstName}

      button.navbar-toggler(type='button', data-toggle='collapse', data-target='#navbarSupportedContent', aria-controls='navbarSupportedContent', aria-expanded='false', aria-label='Toggle navigation')
        span.navbar-toggler-icon
      #navbarSupportedContent.collapse.navbar-collapse
        ul.navbar-nav.mr-auto
          li.nav-item
            a.client_btn.btn.btn-success(href='/pickup', data-toggle='modal', data-target='#modalPickUp') Request Pick Up
          li.nav-item
            a.client_btn.btn.btn-success(href='/register/profile') Profile
        ul.navbar-nav.ml-auto
          li.nav-item
            a.btn.btn-success(href='/logout') Logout

    div
      - if (messages.success) {
        .alert.alert-success.alert-dismissible.fade.show(role='alert')
          p #{messages.success}
          button.close(type='button', data-dismiss='alert', aria-label='Close')
            span(aria-hidden='true') &times;
      - }
    .mapbox
      #map
        
      script.

        var x = !{JSON.stringify(recyclables)}
        
        function initMap() {
          var map = new google.maps.Map(document.getElementById('map'), 
            {
              zoom: 15,
              center: { lat: 44.69254300000001, lng: -73.46696199999997 },
              disableDefaultUI: true,

              styles: [
                {elementType: 'geometry', stylers: [{color: '#ebe3cd'}]},
                {elementType: 'labels.text.fill', stylers: [{color: '#523735'}]},
                {elementType: 'labels.text.stroke', stylers: [{color: '#f5f1e6'}]},
                {
                  featureType: 'administrative',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#c9b2a6'}]
                },
                {
                  featureType: 'administrative.land_parcel',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#dcd2be'}]
                },
                {
                  featureType: 'administrative.land_parcel',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#ae9e90'}]
                },
                {
                  featureType: 'landscape.natural',
                  elementType: 'geometry',
                  stylers: [{color: '#dfd2ae'}]
                },
                {
                  featureType: 'poi',
                  elementType: 'geometry',
                  stylers: [{color: '#dfd2ae'}]
                },
                {
                  featureType: 'poi',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#93817c'}]
                },
                {
                  featureType: 'poi.park',
                  elementType: 'geometry.fill',
                  stylers: [{color: '#a5b076'}]
                },
                {
                  featureType: 'poi.park',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#447530'}]
                },
                {
                  featureType: 'road',
                  elementType: 'geometry',
                  stylers: [{color: '#f5f1e6'}]
                },
                {
                  featureType: 'road.arterial',
                  elementType: 'geometry',
                  stylers: [{color: '#fdfcf8'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'geometry',
                  stylers: [{color: '#f8c967'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#e9bc62'}]
                },
                {
                  featureType: 'road.highway.controlled_access',
                  elementType: 'geometry',
                  stylers: [{color: '#e98d58'}]
                },
                {
                  featureType: 'road.highway.controlled_access',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#db8555'}]
                },
                {
                  featureType: 'road.local',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#806b63'}]
                },
                {
                  featureType: 'transit.line',
                  elementType: 'geometry',
                  stylers: [{color: '#dfd2ae'}]
                },
                {
                  featureType: 'transit.line',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#8f7d77'}]
                },
                {
                  featureType: 'transit.line',
                  elementType: 'labels.text.stroke',
                  stylers: [{color: '#ebe3cd'}]
                },
                {
                  featureType: 'transit.station',
                  elementType: 'geometry',
                  stylers: [{color: '#dfd2ae'}]
                },
                {
                  featureType: 'water',
                  elementType: 'geometry.fill',
                  stylers: [{color: '#b9d3c2'}]
                },
                {
                  featureType: 'water',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#92998d'}]
                }
              ]
            }
          );

          // list of markers
          var markers = []
          for (var i = 0; i < x.length; i++) {
            var loc = {};
            loc.coords = {};
            loc.coords.lat = x[i].latitude;
            loc.coords.lng = x[i].longitude;
            loc.content = '<strong>'+ x[i].street + '</strong><br/><small>' + x[i].city + ', ' + x[i].state + '</small>';
            markers.push(loc);
          }

          for (var i = 0; i < x.length; i++) {
            if (x[i].processed == false) 
              addNotProcessedMarker( markers[i] ); 
            else {
              var h = new Date();
              var localTime = h.getTime();
              if ((localTime - x[i].processedTime) < 3 * 60 * 1000)
                addProcessedMarker( markers[i] ); 
            }
          }

          function addNotProcessedMarker(props) {
            var marker = new google.maps.Marker({
              position: props.coords,
              animation: google.maps.Animation.DROP,
              map: map,
              icon: {
                //url: '../css/img/clientMarkerNotProcessed.svg',
                url: '../css/img/clientMarkerNotProcessed.png',
                scaledSize: new google.maps.Size(40, 64)
              }
            });
            if (props.content) {
              var infoWindow = new google.maps.InfoWindow({content: props.content}); 
              marker.addListener('click', function() {
                infoWindow.open(map, marker);
              });
            }
          }

          function addProcessedMarker(props) {
            var marker = new google.maps.Marker({
              position: props.coords,
              animation: google.maps.Animation.DROP,
              map: map,
              icon: {
                // url: '../css/img/clientMarkerProcessed.svg',
                url: '../css/img/clientMarkerProcessed.png',
                scaledSize: new google.maps.Size(40, 64)
              }
            });
            if (props.content) {
              var infoWindow = new google.maps.InfoWindow({content: props.content}); 
              marker.addListener('click', function() {
                infoWindow.open(map, marker);
              });
            }
          }

        }



        // >>> function for make markers bounce
        function toggleBounce() {
          if (marker.getAnimation() !== null) {
            marker.setAnimation(null);
          } else {
            marker.setAnimation(google.maps.Animation.BOUNCE);
          }
        }
        
      script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyCrqfaam7V-4NH0SBi8LUcJRzMtaGl28Y4&callback=initMap')
      script.
        $(function(){
          var requiredCheckboxes = $(':checkbox[required]');
          requiredCheckboxes.change(function(){
            if(requiredCheckboxes.is(':checked')) {
              requiredCheckboxes.removeAttr('required');
            }
            else {
              requiredCheckboxes.attr('required', 'required');
            }
          });
        });
